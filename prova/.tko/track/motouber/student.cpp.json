{
    "patches": [
        {
            "label": "2024-12-04_18-32-57",
            "content": "#include <iostream>\n#include \"fn.hpp\"\n\n\nclass Pessoa{\nprivate: \n    std::string nome;\n    int dinheiro;\n\npublic:\n    Pessoa(): nome(\"\"), dinheiro(0) {}\n\n    std::string getNome () { return nome; }\n\n    int getDinheiro () const { return dinheiro; }\n\n    void setNome(const std::string &novoNome) { nome = novoNome; }\n    void setDinheiro(int novoDinheiro) { dinheiro = novoDinheiro; }\n\n\n};\n\nclass Moto{\nprivate: \n    int custo;\n    std::shared_ptr<Pessoa> motorista;\n    std::shared_ptr<Pessoa> passageiro;\n\npublic:\n    Moto(): custo(0), motorista(nullptr), passageiro(nullptr) {}\n\n    int getCusto () const { return custo; }\n    std::shared_ptr<Pessoa> getMotorista () { return motorista; }\n    std::shared_ptr<Pessoa> getPassageiro () { return passageiro; }\n\n    void setCusto (int novoCusto) { custo = novoCusto; }\n    void setMotorista(std::shared_ptr<Pessoa> novoMotorista) { motorista = novoMotorista; }\n    void setPassageiro(std::shared_ptr<Pessoa> novoPassageiro) { passageiro = novoPassageiro; }\n\n};\n\nclass Adapter {\nprivate:\n    std::shared_ptr<Moto> moto;\n    std::shared_ptr<Pessoa> pessoa;\n\npublic:\n\n    void setPessoa (std::shared_ptr<Pessoa> person) {\n        this->pessoa = person;\n    }\n\n    void setMoto (std::shared_ptr<Moto> mot) {\n        this->moto = mot;\n    }\n\n\n    void setDriver(std::string name, int money) {\n        auto driver = std::make_shared<Pessoa>();\n        driver->setNome(name);\n        driver->setDinheiro(money);\n        moto->setMotorista(driver);\n    }\n    \n    void setPass(std::string name, int money) {\n        if (!moto->getMotorista()){\n            fn::write(\"N\u00e3o h\u00e1 motorista.\");\n            return;\n        }\n        auto pass = std::make_shared<Pessoa>();\n        pass->setNome(name);\n        pass->setDinheiro(money);\n        moto->setPassageiro(pass);\n    }\n\n    void drive(int distance) {\n        if ((!moto->getMotorista()) || (!moto->getPassageiro())){\n            fn::write(\"N\u00e3o h\u00e1 motorista ou passageiro.\");\n            return;\n        }\n        moto->setCusto(distance);\n    }\n    \n    void leavePass() {\n        \n    }\n    void show() {\n        fn::write(\"Motorista: \" + (moto->getMotorista() ? moto->getMotorista()->getNome() : \"none\") + \n              \", Passageiro: \" + (moto->getPassageiro() ? moto->getPassageiro()->getNome() : \"none\") + \n              \", Custo: \" + std::to_string(moto->getCusto()) + \"\\n\");\n\n    }\n};\n\nint main() {\n    Adapter adp;\n    while (true) {\n        fn::write(\"$\", \"\");\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write(line);\n\n        if      (args[0] == \"end\")       { break;                                  }\n        else if (args[0] == \"setDriver\") { adp.setDriver(args[1], +args[2]);       }\n        else if (args[0] == \"setPass\")   { adp.setPass(args[1], +args[2]);         }\n        else if (args[0] == \"drive\")     { adp.drive(+args[1]);                    }\n        else if (args[0] == \"leavePass\") { adp.leavePass();                        }\n        else if (args[0] == \"show\")      { adp.show();                             }\n        else                             { fn::write(\"fail: command not found\\n\"); }\n    }\n}\n"
        }
    ]
}